rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isPublic() {
      return resource.data.visibility == 'public';
    }
    
    function isFriend(userId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }
    
    function isInRange(location1, location2, maxDistance) {
      let lat1 = location1.latitude;
      let lon1 = location1.longitude;
      let lat2 = location2.latitude;
      let lon2 = location2.longitude;
      
      // Haversine formula for distance calculation
      let R = 6371; // Earth's radius in kilometers
      let dLat = (lat2 - lat1) * 3.14159 / 180;
      let dLon = (lon2 - lon1) * 3.14159 / 180;
      let a = sin(dLat/2) * sin(dLat/2) + cos(lat1 * 3.14159 / 180) * cos(lat2 * 3.14159 / 180) * sin(dLon/2) * sin(dLon/2);
      let c = 2 * atan2(sqrt(a), sqrt(1-a));
      let distance = R * c;
      
      return distance <= maxDistance;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isPublic());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
      
      // User's friends subcollection
      match /friends/{friendId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's settings subcollection
      match /settings/{settingId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's achievements subcollection
      match /achievements/{achievementId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isPublic());
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // AR Memories collection
    match /ar_memories/{memoryId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.visibility == 'public' ||
        (resource.data.visibility == 'friends' && isFriend(resource.data.userId)) ||
        (resource.data.visibility == 'nearby' && isInRange(resource.data.location, request.auth.token.location, 5.0))
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.visibility in ['public', 'friends', 'private', 'nearby'];
      
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Communities collection
    match /communities/{communityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;
      
      // Community members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && 
          (memberId == request.auth.uid || 
           get(/databases/$(database)/documents/communities/$(communityId)).data.ownerId == request.auth.uid);
      }
      
      // Community posts subcollection
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && 
          resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && 
          (resource.data.authorId == request.auth.uid || 
           get(/databases/$(database)/documents/communities/$(communityId)).data.ownerId == request.auth.uid);
      }
    }

    // Chats collection
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.participants[request.auth.uid] == true || 
         request.resource.data.participants[request.auth.uid] == true);
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          (get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true);
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // User locations collection (for nearby features)
    match /user_locations/{userId} {
      allow read: if isAuthenticated() && 
        (userId == request.auth.uid || 
         resource.data.visibility == 'public' ||
         isFriend(userId));
      
      allow write: if isAuthenticated() && 
        userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
    }

    // App settings collection
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can write (handled via admin SDK)
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if false; // Only admin can read
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      allow update, delete: if false; // Only admin can modify
    }

    // Analytics collection (for app usage data)
    match /analytics/{docId} {
      allow read, write: if false; // Only admin can access
    }
  }
}
